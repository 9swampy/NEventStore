- Create a mechanism to allow the upconversion of events.

- Add additional documentation and more complete quickstart examples
- Create adapters for the storage engines listed in readme.
- Website?
- Master/slave replication "helper"
  * When failing over from master to slave, ensure that the most recent commits are in the slave.
  * If not, push the commits to the slave to help avoid a split brain condition.

- Polling Dispatcher which polls the event store at the specified frequency and dispatches and new
  commits which have been added.

- Multi-format Deserializer which attempts a number of internal deserializers (JSON, BSON, PB, Binary, XML, etc)
  before giving up.  This would allow people to change their serialization in production if necessary
  for things like encryption, etc.  For example, we're changing the encryption on all commits and we need to
  support several keys simultaenously for a period of time...

- Create a PersistenceEngine implementation that can be exposed as an endpoint, e.g. REST or HTTP, etc. such that
  the OptimisticEventStore could use that endpoint as the underlying storage. This would create a logical layering
  point which could then be separated into physical layers more easily.

3.0:
 - .NET 4.0 only?
 - Logging?
 - Merge CommonDomain

3.1
 - Amazon S3/Tables persistence
 - CouchDB persistence
 - Azure Tables persistence
 - Oracle persistence
 - Sybase ASE persistence
 - Sybase SQL Anywhere persistence
 - ProtocolBuffers serializer


3.2:
 - FileSystem persistence
 - Redis

4.0:
 - Master/slave failover